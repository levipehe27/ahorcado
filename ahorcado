# Problem Set 2, hangman.py
# Name:
# Collaborators:
# Time spent:

# Hangman Game
# -----------------------------------
# Helper code
# You don't need to understand this helper code,
# but you will have to know how to use the functions
# (so be sure to read the docstrings!)

import random
import string

WORDLIST_FILENAME = "words.txt"


def load_words():
    """
    Returns a list of valid words. Words are strings of lowercase letters.

    Depending on the size of the word list, this function may
    take a while to finish.
    """
    print("Loading word list from file...")
    # inFile: file
    inFile = open(WORDLIST_FILENAME, 'r')
    # line: string
    line = inFile.readline()
    # wordlist: list of strings
    wordlist = line.split()
    print("  ", len(wordlist), "words loaded.")
    return wordlist


def choose_word(wordlist):
    """
    wordlist (list): list of words (strings)

    Returns a word from wordlist at random
    """
    return random.choice(wordlist)


# end of helper code

# -----------------------------------

# Load the list of words into the variable wordlist
# so that it can be accessed from anywhere in the program
wordlist = load_words()


def is_word_guessed(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing; assumes all letters are
      lowercase
    letters_guessed: list (of letters), which letters have been guessed so far;
      assumes that all letters are lowercase
    returns: boolean, True if all the letters of secret_word are in letters_guessed;
      False otherwise
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    pass


def get_guessed_word(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string, comprised of letters, underscores (_), and spaces that represents
      which letters in secret_word have been guessed so far.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    pass


def get_available_letters(letters_guessed):
    '''
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string (of letters), comprised of letters that represents which letters have not
      yet been guessed.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    pass


def hangman(secret_word):
    '''
    secret_word: string, the secret word to guess.

    Starts up an interactive game of Hangman.

    * At the start of the game, let the user know how many
      letters the secret_word contains and how many guesses s/he starts with.

    * The user should start with 6 guesses

    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.

    * Ask the user to supply one guess per round. Remember to make
      sure that the user puts in a letter!

    * The user should receive feedback immediately after each guess
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the
      partially guessed word so far.

    Follows the other limitations detailed in the problem write-up.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    pass


# When you've completed your hangman function, scroll down to the bottom
# of the file and uncomment the first two lines to test
# (hint: you might want to pick your own
# secret_word while you're doing your own testing)


# -----------------------------------


def match_with_gaps(my_word, other_word):
    '''
    my_word: string with _ characters, current guess of secret word
    other_word: string, regular English word
    returns: boolean, True if all the actual letters of my_word match the
        corresponding letters of other_word, or the letter is the special symbol
        _ , and my_word and other_word are of the same length;
        False otherwise:
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    pass


def show_possible_matches(my_word):
    '''
    my_word: string with _ characters, current guess of secret word
    returns: nothing, but should print out every word in wordlist that matches my_word
             Keep in mind that in hangman when a letter is guessed, all the positions
             at which that letter occurs in the secret word are revealed.
             Therefore, the hidden letter(_ ) cannot be one of the letters in the word
             that has already been revealed.

    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    pass


def hangman_with_hints(secret_word):
    '''
    secret_word: string, the secret word to guess.

    Starts up an interactive game of Hangman.

    * At the start of the game, let the user know how many
      letters the secret_word contains and how many guesses s/he starts with.

    * The user should start with 6 guesses

    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.

    * Ask the user to supply one guess per round. Make sure to check that the user guesses a letter

    * The user should receive feedback immediately after each guess
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the
      partially guessed word so far.

    * If the guess is the symbol *, print out all words in wordlist that
      matches the current guessed word.

    Follows the other limitations detailed in the problem write-up.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    pass




if __name__ == "__main__":

    secret_word = choose_word(wordlist)
    hangman(secret_word)


letra = " "
longitud = len(secret_word)
rango = longitud
intentos = 6
letters_guessed = []
desarrollo = []
alfabeto = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u",
            "v", "w", "x", "y", "z"]
vocales = ["a", "e", "i", "o", "u"]

consonantes = ["b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z"]

advertencia = 3
quitarintento = True

cadena = []

for char in secret_word :
    cadena.append(char + ' ')


print("Bienvenido al juego de El Ahorcado")
print("Estoy pensando en una palabra de ", longitud, " letras.")


def is_word_guessed(secret_word, letters_guessed):



    if secret_word == letters_guessed:
        print("Felicidades, la palabra ha sido adivinada")

    else :
        print("----------------------------------------------------")


def get_guessed_word(secret_word, letters_guessed):



    for i in range(len(secret_word)):


        letters_guessed.append("_ ")

        if letra == secret_word[i]:
            letters_guessed[i] = letra + ' '

    print(''.join(letters_guessed[0:rango]))



def get_available_letters(letters_guessed):
    for i in range(len(letters_guessed)):
        while letters_guessed[i] in alfabeto:
            alfabeto.remove(letters_guessed[i])
    print(''.join(alfabeto))











while intentos > -1:
    if intentos == 6:
        print(" --------")
        print(" |      |")
        print(" |")
        print(" |")
        print(" |")
        print(" |")
        print("---")
    elif intentos == 5:
        print(" --------")
        print(" |      |")
        print(" |      o")
        print(" |")
        print(" |")
        print(" |")
        print("---")
    elif intentos == 4:
        print(" --------")
        print(" |      |")
        print(" |      o")
        print(" |      |")
        print(" |")
        print(" |")
        print("---")
    elif intentos == 3:
        print(" --------")
        print(" |      |")
        print(" |      o")
        print(" |     /|")
        print(" |")
        print(" |")
        print("---")
    elif intentos == 2:
        print(" --------")
        print(" |      |")
        print(" |      o")
        print(" |     /|\\")
        print(" |")
        print(" |")
        print("---")
    elif intentos == 1:
        print(" --------")
        print(" |      |")
        print(" |      o")
        print(" |     /|\\")
        print(" |     /")
        print(" |")
        print("---")
    elif intentos == 0:
        print(" --------")
        print(" |      |")
        print(" |      o")
        print(" |     /|\\")
        print(" |     / \\")
        print(" |")
        print("---")
        print("PERDISTE. La palabra era " ,secret_word)

        break

    while len(letters_guessed) > len(secret_word) :
        del letters_guessed[-1]







    print(secret_word)
    print(get_guessed_word(secret_word, letters_guessed))
    print("Te quedan ", intentos, " intentos.")
    print("Recuerde ingresar una sola letra en cada turno.")
    print("Elige alguna de las letras disponibles ", get_available_letters(letters_guessed)," ")
    letra = input()
    letra = letra.lower()

    if letra in desarrollo:
        advertencia -= 1
        print("Esta letra ya se utilizo , te quedan ", advertencia, " advertencia(s) mas")
    elif letra not in alfabeto:
        advertencia -= 1
        print("El caracter ingresado no es valido, te quedan ", advertencia, " advertencia(s) mas")


    else:
        desarrollo.append(letra)
        for i in range(len(secret_word)):
            if letra == secret_word[i]:
                quitarintento = False

        if quitarintento:

            if letra == "a" :
                    intentos = intentos - 2
            elif letra == "e" :
                    intentos = intentos - 2
            elif letra == "i" :
                    intentos = intentos - 2
            elif letra == "o" :
                    intentos = intentos - 2
            elif letra == "u" :
                    intentos = intentos - 2
            else :
                    intentos = intentos - 1
    if advertencia == 0 :
        advertencia = 3
        intentos = intentos -1

    while len(letters_guessed) > len(secret_word) :
        del letters_guessed[-1]


    print(is_word_guessed(secret_word, letters_guessed))
    if cadena == letters_guessed:
        print("Felicidades, la palabra ha sido adivinada")
        break
    print(cadena)
    print(letters_guessed)



